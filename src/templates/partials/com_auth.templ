package partials

import (
  "github.com/Ryan-Har/site-monitor/src/config"
  // "encoding/json"
	"fmt"
  "html/template"
)

templ ImportFirebaseScripts() {
    <!-- Firebase App (the core Firebase SDK) -->
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
    <!-- Firebase Authentication -->
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>
}

//templ makes it difficult to embed information within the javascript variable so we make use of html templating
func firebaseConfig() *template.Template {
  tmpl := template.New("firebaseConfig")

  tmpl.Funcs(template.FuncMap{
    "rawJS": func(s string) template.JS {
      return template.JS(s)
    },
  })

  _, err := tmpl.Parse("<script> var firebaseConfig = {{. | rawJS }} </script>")
  if err != nil {
    fmt.Println("error parsing firebaseConfig script", err)
  }

  return tmpl
}

templ FirebaseConfig() {
  @ImportFirebaseScripts()
  @templ.FromGoHTML(firebaseConfig(), config.GetConfig().FirebaseConfigAsJsonString())
}

templ InitializeFirebaseApp() {
    @FirebaseConfig()
    <script>
    firebase.initializeApp(firebaseConfig);
    </script>
}

templ MonitorAuthState() {
  @InitializeFirebaseApp()
  <script>
  async function updateAuthCookie(idToken) {
     try {
      const response = await fetch('/updateauthcookie', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': idToken
        },
        body: JSON.stringify({ idToken: idToken })
      });
      
      const data = await response.json();
      console.log('Success:', data);
      return data;
    } catch (error) {
      console.error('Error:', error);
      throw error;  // re-throw the error so that the calling function can handle it
    }
  };

  firebase.auth().onAuthStateChanged((user) => {
  if (user) {
    user.getIdToken(true).then((idToken) => {
      updateAuthCookie(idToken).then((response) => {
        console.log(response)
        const path = window.location.pathname;
        if (path.includes('login') || path.includes('signup')) {
          window.location.href = '/monitors';
        }
      }) 
    }).catch((error) => {
      console.error('Error refreshing token:', error);
    });
  } else {
    console.log('No user is signed in');
  }
  });

  function signUp() {
      var name = document.getElementById('name').value;
      var email = document.getElementById('email').value;
      var password = document.getElementById('password').value;

      firebase.auth().createUserWithEmailAndPassword(email, password)
        .then((userCredential) => {
          // Signed up successfully
          var user = userCredential.user;
          user.updateProfile({
              displayName: name
          }).then(() => {
            console.log('User signed up: ', user);
            login(email, password)
            })
          })
        .catch((error) => {
          var errorCode = error.code;
          var errorMessage = error.message;
          console.error('Error: ', errorCode, errorMessage);
        });
  };

  function login(eml, psswd) {
      var email = eml || document.getElementById('email').value;
      var password = psswd || document.getElementById('password').value;

    firebase.auth().signInWithEmailAndPassword(email, password)
      .then((userCredential) => {
        const user = userCredential.user;
        console.log('logged in');
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        console.error('Error: ', errorCode, errorMessage);
      });
    };
  </script>
}
