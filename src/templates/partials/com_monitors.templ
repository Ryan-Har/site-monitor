package partials

import (
    "strconv"
    "github.com/Ryan-Har/site-monitor/src/models"
    "github.com/Ryan-Har/site-monitor/src/internal/database"
    "time"
    "fmt"
    "strings"
)

//MonitorOptions displays the options to add a new monitor
templ MonitorOptions() {
    <div class="row my-2 mx-3">
        <div class="col">
            <h4>Monitors</h4>
        </div>
        <div class="col-auto ml-auto">
            <a class="btn btn-primary btn-sm" href="/monitors/new">Add Monitor</a>
        </div>
    </div>
}


// MonitorStatus displays the status of the monitors, how many are up, down, and paused
//input: up, down, paused as string
templ MonitorStatus(up string, down string, paused string) {
    <div class="row me-2 my-2">
        <div class="card bg-dark-subtle">
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <h4>Monitor Status</h4>
                    </div>
                </div>
                <div class="row">
                    <div class="col-4">
                        { up }
                    </div>
                    <div class="col-4">
                        { down }
                    </div>
                    <div class="col-4">
                        { paused }
                    </div>
                </div>
                <div class="row">
                    <div class="col-4 fw-light lh-sm" style="font-size: 0.7rem;">
                        Up
                    </div>
                    <div class="col-4 fw-light lh-sm" style="font-size: 0.7rem;">
                        Down
                    </div>
                    <div class="col-4 fw-light lh-sm" style="font-size: 0.7rem;">
                        Paused
                    </div>
                </div>
            </div>
        </div>
    </div>
}

// SingleMonitor displays a single monitor card
templ SingleMonitor(info models.MonitorCardGenerationModel) {
    <div class="row my-2 mx-3">
        <div class="card bg-dark-subtle">
            <div class="card-body">
                <div class="row">
                    <div class="col-1 d-flex justify-content-center my-2 pe-0">
                    if info.Up {
                        <i class="bi bi-arrow-up-circle text-success" style="font-size: 1.5rem; -webkit-text-stroke: 1.5px;"></i>
                    } else {
                        <i class="bi bi-arrow-down-circle text-danger" style="font-size: 1.5rem; -webkit-text-stroke: 1.5px;"></i>
                    }
                    </div>
                    <div class="col d-flex flex-column">
                        <div class="col align-self-start"> { info.Name() } </div>
                        <div class="col align-self-start fw-light lh-sm" style="font-size: 0.7rem;">
                        if info.Up {
                            { "up " }
                        } else {
                            { "down " }
                        }
                        if info.LastChangeSecs == 0 {
                            { "since monitor started" }
                        } else {
                            { FormatDuration(time.Second * time.Duration(info.LastChangeSecs)) }
                        }
                        </div>
                    </div>
                    <div class="col-4">
                        @intervalColumn(info.RefreshIntervalSecs)
                        //TODO: add up / down chart with percentage
                    </div>
                    <div class="col-1 d-flex justify-content-center my-2 pe-0">
                        @singleMonitorMenu(info.MonitorID)
                    </div>
                </div>
            </div>
        </div>
    </div>
}

templ intervalColumn(intervalInSeconds int) {
    <i class="bi bi-info" data-bs-toggle="tooltip" data-bs-placement="left" 
    data-bs-title={ getTooltipMessage(intervalInSeconds) }></i>  
    { FormatDuration(time.Second * time.Duration(intervalInSeconds)) }
}

templ singleMonitorMenu(monitorId int) {
    <div class="dropdown">
        <i class="bi bi-gear" type="button"  data-bs-toggle="dropdown" aria-expanded="false"></i>
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <li><a class="dropdown-item" href={ templ.URL(fmt.Sprintf("/monitors/%d", monitorId)) }>View Monitor</a></li>
            //<li><a class="dropdown-item" href={ templ.URL(fmt.Sprintf("/monitors/%d/edit", monitorId)) }>Edit Monitor</a></li> TODO: Add ability to edit
            <li><a class="dropdown-item" hx-trigger="click" hx-target="closest .row.my-2.mx-3" hx-swap="outerHTML" hx-delete={ fmt.Sprintf("/monitors/%d", monitorId) } hx-confirm="Are you sure you wish to delete your monitor?">Delete Monitor</a></li>
        </ul>
    </div>
}


func getTooltipMessage(intervalInSeconds int) string {
    return "Refresh happens every " + FormatDuration(time.Second * time.Duration(intervalInSeconds)) + "."
}

templ addMonitorFormTitle() {
    <div class="row my-2 mx-3">
        <h4> Add Monitor </h4>
    </div>
}


templ AddMonitorForm() {
    @addMonitorFormTitle()
    <style type="text/css">
        .error-message {
            color:red;
        }
        .error input {
            box-shadow: 0 0 3px #CC0000;
        }
        .valid input {
            box-shadow: 0 0 3px #36cc00;
        }
    </style>

    <div class="row my-2 mx-3">
        <div class="card bg-dark-subtle">
            <div class="card-body">
                <form action="/monitors/new" method="post" hx-boost="true" hx-target="#formContent" id="addMonitorForm">
                    <div class="my-2">
                        <label for="typeSelection" class="form-label">Monitor Type</label>
                        <select class="form-select" id="typeSelection" name="typeSelection" hx-get="/monitors/getCreateFormInfo" hx-trigger="change">
                        <option hidden disabled selected value> -- select an option -- </option>
                        <option value="HTTP">HTTP / Website Monitoring</option>
                        <option value="ICMP">PING Monitoring</option>
                        <option value="TCP">Port Monitoring</option>
                    </select>
                    <hr></hr>
                    </div>

                    <div id="formContent">

                    </div>
                    <div class="text-end">
                        <button class="btn btn-primary" id="formSubmitButton" type="submit">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
    const form = document.getElementById('addMonitorForm');
    const submitButton = document.getElementById('formSubmitButton');

    function checkErrors() {
    const hasErrors = !!form.querySelectorAll(".error").length;

    submitButton.disabled = hasErrors;
    }

    checkErrors();

    form.addEventListener("htmx:afterSwap", checkErrors);
    </script>
}

templ MonitorFormContentHTTP(notifs map[int]string) {
    @MonitorLocationHttp()
    <hr></hr>
    @NotificationSelection(notifs)
    <hr></hr>
    @MonitorInterval()
    <hr></hr>
    @TimeoutInterval()
    <hr></hr>
}

templ MonitorFormContentPing(notifs map[int]string) {
    @MonitorLocationIpOrHost()
    <hr></hr>
    @NotificationSelection(notifs)
    <hr></hr>
    @MonitorInterval()
    <hr></hr>

}

templ MonitorFormContentPort(notifs map[int]string) {
    @MonitorLocationPort()
    <hr></hr>
    @NotificationSelection(notifs)
    <hr></hr>
    @MonitorInterval()
    <hr></hr>
    @TimeoutInterval()
    <hr></hr>
}

templ MonitorLocationIpOrHost() {
    <div hx-target="this" hx-swap="outerHTML">
    <label for="monitorLocation" class="form-label">IP Or Host To Monitor</label>
    <input type="text" class="form-control" id="monitorLocation" name="monitorLocation" placeholder="example.com OR 8.8.8.8" hx-post="/validation/monitorlocationiporhost"></input>
    </div>
}

templ MonitorLocationIpOrHostValidationResponseValid(curValue string) {
    <div hx-target="this" hx-swap="outerHTML" class="valid">
    <label for="monitorLocation" class="form-label">IP Or Host To Monitor</label>
    <input type="text" class="form-control" id="monitorLocation" name="monitorLocation" placeholder="example.com OR 8.8.8.8" hx-post="/validation/monitorlocationiporhost" value={ curValue }></input>
    </div>
}

templ MonitorLocationIpOrHostValidationResponseInvalid(curValue string, errMsg string) {
    <div hx-target="this" hx-swap="outerHTML" class="error">
    <label for="monitorLocation" class="form-label">IP Or Host To Monitor</label>
    <input type="text" class="form-control" id="monitorLocation" name="monitorLocation" placeholder="example.com OR 8.8.8.8" hx-post="/validation/monitorlocationiporhost" value={ curValue }></input>
    <div class="error-message"> { errMsg } </div>
    </div>
}

templ MonitorLocationHttp() {
    <div hx-target="this" hx-swap="outerHTML">
    <label for="monitorLocation" class="form-label">URL To Monitor</label>
    <input type="text" class="form-control" id="monitorLocation" name="monitorLocation" placeholder="https://www.example.com" hx-post="/validation/monitorlocationhttp"></input>
    </div>
}

templ MonitorLocationHttpValidationResponseValid(curValue string) {
    <div hx-target="this" hx-swap="outerHTML" class="valid">
    <label for="monitorLocation" class="form-label">URL To Monitor</label>
    <input type="text" class="form-control" id="monitorLocation" name="monitorLocation" placeholder="https://www.example.com" hx-post="/validation/monitorlocationhttp" value={ curValue }></input>
    </div>
}

templ MonitorLocationHttpValidationResponseInvalid(curValue string, errMsg string) {
    <div hx-target="this" hx-swap="outerHTML" class="error">
    <label for="monitorLocation" class="form-label">URL To Monitor</label>
    <input type="text" class="form-control" id="monitorLocation" name="monitorLocation" placeholder="https://www.example.com" hx-post="/validation/monitorlocationhttp" value={ curValue }></input>
    <div class="error-message"> { errMsg } </div>
    </div>
}

templ MonitorPortNumber() {
    <div hx-target="this" hx-swap="outerHTML">
    <label for="monitorPort" class="form-label">Port To Monitor</label>
    <input type="number" class="form-control" id="monitorPort" name="monitorPort" placeholder="143" hx-post="/validation/monitorportnumber"></input>
    </div>
}

templ MonitorPortNumberValidationResponseValid(curValue string) {
    <div hx-target="this" hx-swap="outerHTML" class="valid">
    <label for="monitorPort" class="form-label">Port To Monitor</label>
    <input type="number" class="form-control" id="monitorPort" name="monitorPort" placeholder="143" hx-post="/validation/monitorportnumber" value={ curValue }></input>
    </div>
}

templ MonitorPortNumberValidationResponseInvalid(curValue string, errMsg string) {
    <div hx-target="this" hx-swap="outerHTML" class="error">
    <label for="monitorPort" class="form-label">Port To Monitor</label>
    <input type="number" class="form-control" id="monitorPort" name="monitorPort" placeholder="143" hx-post="/validation/monitorportnumber" value={ curValue }></input>
    <div class="error-message"> { errMsg } </div>
    </div>
}

templ MonitorLocationPort() {
    <div class="row">
        <div class="col-6">
            @MonitorLocationIpOrHost()        
        </div>
        <div class="col-6">
            @MonitorPortNumber()
        </div>
    </div>
}

templ NotificationSelection(notifs map[int]string) {
    <label for="notificationSelection" class="form-label">Notification Method</label>
    <select class="form-select" id="notificationSelection" name="notificationSelection">
        if len(notifs) == 0 {
            <option hidden disabled selected value> -- no notifications set up -- </option>
        } else {
            <option hidden disabled selected value> -- select an option -- </option>
            for key, value := range notifs {
                <option value={ strconv.Itoa(key) }>{value}</option>
            }
        }
    </select>

}

templ MonitorInterval() {
    <label for="monitorIntervalNumber" class="form-label">Monitor Interval (minutes)</label>
    <input type="range" class="form-range" id="monitorIntervalRange" name="monitorIntervalRange" min="1" max="60" value="5" oninput="this.form.monitorIntervalNumber.value=this.value"></input>
    <input type="number" class="form-input" id="monitorIntervalNumber" name="monitorIntervalNumber" min="1" max="60" value="5" oninput="this.form.monitorIntervalRange.value=this.value"/>
}

templ TimeoutInterval() {
    <label for="timeoutIntervalNumber" class="form-label">Timeout Interval (seconds)</label>
    <input type="range" class="form-range" id="timeoutIntervalRange" name="timeoutIntervalRange" min="1" max="60" value="5" oninput="this.form.timeoutIntervalNumber.value=this.value"></input>
    <input type="number" class="form-input" id="timeoutIntervalNumber" name="timeoutIntervalNumber" min="1" max="60" value="5" oninput="this.form.timeoutIntervalRange.value=this.value"/>
}


templ SingleMonitorTitle(statusUp bool, url string, mType string) {
    <div class="row mt-2 mb-4 mx-3">
        <div class="col-1 d-flex justify-content-center pe-0">
        if statusUp {
            <i class="bi bi-arrow-up-circle text-success" style="font-size: 1.5rem; -webkit-text-stroke: 1.5px;"></i>
        } else {
            <i class="bi bi-arrow-down-circle text-danger" style="font-size: 1.5rem; -webkit-text-stroke: 1.5px;"></i>
        }
        </div>
        <div class="col d-flex flex-column">
            <div class="col align-self-start"> <strong>{ url }</strong> </div>
            <div class="col align-self-start fw-light lh-sm" style="font-size: 0.7rem;">
                { mType } monitor for { url }
            </div>
        </div>
    </div>
}

templ CurrentStatusCard(up bool, lastChangeSec int) {
    <div class="col col-6">
        <div class="card bg-dark-subtle">
            <div class="card-body">
                    <div class="card-title">
                    Current Status
                    </div>

                    if up {
                        <p><span class="green"> Up </span> since 
                        if lastChangeSec == 0 {
                            monitor began
                        } else {
                            { dateTimeXSecondsAgo(lastChangeSec) }
                        }
                        </p>
                    } else {
                        <p><span class="red"> Down </span> since 
                        if lastChangeSec == 0 {
                            monitor began
                        } else {
                            { dateTimeXSecondsAgo(lastChangeSec) }
                        }
                        </p>
                    }
            </div>
        </div>
    </div>
}

func dateTimeXSecondsAgo(secs int) string {
    return time.Now().Add(- time.Duration(secs) * time.Second).Format("2006-01-02 15:04:05")
}

templ LastCheckCard(lastCheckSecs int, checkInterval int) {
    <div class="col col-6">
        <div class="card bg-dark-subtle">
            <div class="card-body">
                    <div class="card-title">
                    Last Check
                    </div>
                    if lastCheckSecs == 0 {
                        No Check Yet
                    } else {
                        { dateTimeXSecondsAgo(lastCheckSecs) }
                    }
                    <p>
                    checked every { FormatDuration(time.Duration(checkInterval) * time.Second) }
                    </p>    
            </div>
        </div>
    </div>
}

templ ResponseTimeGraph(checks []database.MonitorResult) {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>

    <div class="col">
        <div class="card bg-dark-subtle">
            <div class="card-body">
                    <div class="card-title">
                    Response time
                    </div>
                    <canvas id="myChart">
                    </canvas>
            </div>
        </div>
    </div>

    <script>
        const ctx = document.getElementById('myChart').getContext('2d');
        const currentUrl = window.location.href;
        const responseTimeEndpoint = currentUrl + '/responsetime';
    
        fetch(responseTimeEndpoint)
            .then(response => {
                if (!response.ok) {
                    throw new Error('unable to get response time information')
                }
                return response.json();
            })
            .then(data => {
                console.log(data)
                const dateList = data.map(item => item.date)
                const responseList = data.map(item => item.responsetime)
                const myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dateList,
                    datasets: [{
                    label: 'response time (ms)',
                    data: responseList,
                    //backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'green',
                    borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                    yAxes: [{
                        ticks: {
                        beginAtZero: true
                        }
                    }]
                    }
                }
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });

        

    </script>
}

templ ResponseTimeStats(avg int, min int, max int) {
        <div class="col">
        <div class="card bg-dark-subtle">
            <div class="card-body">
                <div class="row">
                    <div class="col-4">
                        <div class="row ms-0">
                            { strconv.Itoa(avg) } ms
                        </div>
                        <div class="row">
                            <span><i class="bi bi-align-middle"></i>  Average</span>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="row ms-0">
                            { strconv.Itoa(min) } ms
                        </div>
                        <div class="row">
                            <span><i class="bi bi-align-bottom text-success"></i>  Minimum</span>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="row ms-0">
                            { strconv.Itoa(max) } ms
                        </div>
                        <div class="row">
                            <span><i class="bi bi-align-top text-danger"></i>  Maximum</span>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

func FormatDuration(d time.Duration) string {
    days := int(d.Hours()) / 24
    hours := int(d.Hours()) % 24
    minutes := int(d.Minutes()) % 60
    seconds := int(d.Seconds()) % 60

	var parts []string
	if days > 0 {
	parts = append(parts, fmt.Sprintf("%d day%s", days, pluralise(days)))
	}
	if hours > 0 {
	parts = append(parts, fmt.Sprintf("%d hour%s", hours, pluralise(hours)))
	}
	if minutes > 0 {
	parts = append(parts, fmt.Sprintf("%d minute%s", minutes, pluralise(minutes)))
	}
	if seconds > 0 && len(parts) == 0 { // Only include seconds if no other units
	parts = append(parts, fmt.Sprintf("%d second%s", seconds, pluralise(seconds)))
	}

	return strings.Join(parts, ", ")
}

func pluralise(n int) string {
	if n != 1 {
	return "s"
	}
	return ""
}